# tracks whether or not you are in a "math zone" (equation, $$, etc.)
# ------------------------------------------------------#
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

global !p
# Define matrix size in terms of rows/columns
def mat(snip):
    rows = snip.buffer[snip.line][2]
    cols = snip.buffer[snip.line][3]

    snip.buffer[snip.line] = ""

    final_str = "\\begin{bmatrix}\n"
    slot = 1

    for i in range(int(rows)):
        for j in range(int(cols)):
            final_str += f"${slot}"
            slot += 1
            if j != int(cols) - 1:
                final_str += " & "
        if i == int(rows)-1:
            break
        final_str += "\\\\\\ \n"

    final_str += "\n\\end{bmatrix}$0"

    snip.expand_anon(final_str)
endglobal

global !p
def algo():
    # Get the current line number
    current_line = vim.current.window.cursor[0]

    # Check if the current line contains "\begin{algorithm}"
    if "\\begin{algorithm}" in vim.current.buffer[current_line - 1]:
        return True

    # Check if the current line contains "\end{algorithm}"
    if "\\end{algorithm}" in vim.current.buffer[current_line - 1]:
        return False

    # Check if the current line is inside an "algorithm" environment
    for i in range(current_line - 1, 0, -1):
        line = vim.current.buffer[i - 1]
        if "\\begin{algorithm}" in line:
            return True
        elif "\\end{algorithm}" in line:
            return False

    # Default to False if not inside an "algorithm" environment
    return False
endglobal
# ------------------------------------------------------#


# SNIPPETS
# ------------------------------------------------------#
# framework for the entire document
snippet ndoc "Create the document body and title page for a new document" A
\documentclass[titlepage, 12pt, leqno]{article}

% -------------------------------------------------- %
% -------------------- PACKAGES -------------------- %
% -------------------------------------------------- %
\usepackage{import}
\usepackage{pdfpages}
\usepackage{mathtools}
\usepackage{transparent}
\usepackage{enumitem}
\usepackage{xcolor}
\usepackage{tcolorbox}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{parskip}
\usepackage{bbm}
\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage[margin = 1in]{geometry}
\tcbuselibrary{breakable}
\tcbset{breakable = true}


% -------------------------------------------------- %
% -------------- CUSTOM ENVIRONMENTS --------------- %
% -------------------------------------------------- %
\newtcolorbox{note}{colback=black!5!white,
                          colframe=black!55!white,
                          fonttitle=\bfseries,title=Note}

\newtcolorbox{ex}{colback=blue!5!white,
                          colframe=blue!55!white,
                          fonttitle=\bfseries,title=Example}

\newtcolorbox{definition}{colback=red!5!white,
                          colframe=red!55!white,
                          fonttitle=\bfseries,title=Definition}


% -------------------------------------------------- %
% ------------------- COMMANDS --------------------- %
% -------------------------------------------------- %
% Brackets, braces, etc. 
\newcommand{\abs}[1]{\lvert #1 \rvert}
\newcommand{\bigabs}[1]{\Bigl \lvert #1 \Bigr \rvert}
\newcommand{\bigbracket}[1]{\Bigl [ #1 \Bigr ]}
\newcommand{\bigparen}[1]{\Bigl ( #1 \Bigr )}
\newcommand{\ceil}[1]{\lceil #1 \rceil}
\newcommand{\floor}[1]{\lfloor #1 \rfloor}
\newcommand{\norm}[1]{\| #1 \|}
\newcommand{\bignorm}[1]{\Bigl \| #1 \Bigr \| #1}
\newcommand{\inner}[1]{\langle #1 \rangle}
\newcommand{\set}[1]{{ #1 }}


% -------------------------------------------------- %
% -------------------- SETUP ----------------------- %
% -------------------------------------------------- %
\title{\Huge{${1:Title}}}
\author{\large{Mitch Harrison}}
\date{\today}   
\begin{document}
\setlength{\parskip}{1\baselineskip}
\setlength{\parindent}{15pt}
\maketitle
\tableofcontents
\newpage


% -------------------------------------------------- %
% --------------------- BODY ----------------------- %
% -------------------------------------------------- %
\section{${2:Section 1}}

$0

\end{document}
endsnippet


# next text will be typewriter style
snippet "(^|[^a-zA-Z])yt" "The \texttt{} command for typewriter-style font" rA
`!p snip.rv = match.group(1)`\texttt{${1:Text}} $0
endsnippet

# create bulleted new list environment
snippet "lst" "New bulleted list environment" rbA
\begin{itemize}
    \item $1
\end{itemize}
$0
endsnippet

# create bulleted new generic environment
snippet "nv" "New generic environment" rbA
\begin{$1}
    $2
\end{$1}
$0
endsnippet

# create new equation environment. math() evaluates TRUE inside
snippet "ee" "New equation environment" rbA
\begin{equation}
    $1
\end{equation}
$0
endsnippet

# make new note box, defined in document header
snippet "nb" "New note box" rAb
\begin{note}
    $2
\end{note}
$0
endsnippet

# make new definition box, defined in document header
snippet "df" "New definition box" rAb
\begin{definition}
    $2
\end{definition}
$0
endsnippet

# new custom example box, defined in document header
snippet "xx" "New example box" rAb
\begin{ex}
    $2
\end{ex}
$0
endsnippet

# make next text bold
snippet "(^|[^a-zA-Z])bb" "Make new bold text" rA
`!p snip.rv = match.group(1)`\textbf{${1:text}}$0
endsnippet

# make next text italicized
snippet "(^|[^a-zA-Z])tt" "Make new italicized text" rA
`!p snip.rv = match.group(1)`\textit{${1:text}}$0
endsnippet

# bold highlighted text
snippet jbb "Make Visual-selected text bold" A
\textbf{${1:${VISUAL:}}}$0
endsnippet

# italicize highlighted text
snippet fii "Make Visual-selected text italicized" A
\textit{${1:${VISUAL:}}}$0
endsnippet

# ml expands to inline math, but not in the middle of words (command, etc)
snippet "(.+)ml" "Inline LaTeX math" rA
`!p snip.rv = match.group(1)`\$$1\$$0
endsnippet

# 00 automatic zero-subscript, but not after numbers
snippet "([a-zA-Z]|[\}\)\]\|'])00" "Automatic 0 subscript" rA
`!p snip.rv = match.group(1)`_{0}
endsnippet

# sum
context "math()"
snippet "(^|[^a-zA-Z])ss" "Epsilon sum with super and subscripts" rA
`!p snip.rv = match.group(1)`\sum_{${1:i=1}}^{${2:n}}$0
endsnippet

# sum without super or subscripts
context "math()"
snippet "(^|[^a-zA-Z])ds" "Epsilon sum without super and subscripts" rA
`!p snip.rv = match.group(1)`\sum $0
endsnippet

# fraction
context "math()"
snippet "(.*)ff" "Fraction with numerator and demoniator" rA
`!p snip.rv = match.group(1)`\frac{${1:Numerator}}{${2:Denominator}}$0
endsnippet

# single definite integral with limits
context "math()"
snippet "(^|[^a-zA-Z])dnnt" "Definite Integral" rA
`!p snip.rv = match.group(1)`\int_{${1:subscript}}^{${2:superscript}}$0
endsnippet

# single indefinite integral with limits
context "math()"
snippet "(^|[^a-zA-Z])nnt" "Indefinite Integral" rA
`!p snip.rv = match.group(1)`\int$0
endsnippet

# binomial coefficient with top and bottom entry
context "math()"
snippet "([^a-zA-Z])bn" "Binomial coefficient" rA
`!p snip.rv = match.group(1)`\binom{${1:n}}{${2:choose}}$0
endsnippet

# use Omega character
context "math()"
snippet "(^|[^a-zA-Z])om" "lowercase omega" rA
`!p snip.rv = match.group(1)`\omega$0
endsnippet

# use Omega character
context "math()"
snippet "(^|[^a-zA-Z])Om" "uppercase omega" rA
`!p snip.rv = match.group(1)`\Omega$0
endsnippet

# cup
context "math()"
snippet "(^|[^a-zA-Z])cup" "Set Cup notation" rA
`!p snip.rv = match.group(1)`\cup $0
endsnippet

# big cup
context "math()"
snippet bcup "Big up with lower and upper bounds" A
\bigcup_{${1:Lower}}^{${2:Upper}}$0
endsnippet

# big cap
context "math()"
snippet bcap "Big cap with lower and upper bounds" A
\bigcap_{${1:Lower}}^{${2:Upper}}$0
endsnippet

# cap
context "math()"
snippet "(^|[^a-zA-Z])cap" "Set Cap notation" rA
`!p snip.rv = match.group(1)`\cap $0
endsnippet

# overline
context "math()"
snippet "(^|[^a-zA-Z])ol" "Overline notation" rA
`!p snip.rv = match.group(1)`\overline{${1:Text}}$0
endsnippet

# complement
context "math()"
snippet "([^0-9])cm" "Complement superscript" rA
`!p snip.rv = match.group(1)`^\complement $0
endsnippet

# subset
context "math()"
snippet subs "Subset" A
\subset $0
endsnippet

# subseteq
context "math()"
snippet sube "Subset Eq" A
\subseteq $0
endsnippet

# proper superset
context "math()"
snippet sups "proper superset" A
\supset $0
endsnippet

# superset
context "math()"
snippet supe "superset" A
\supseteq $0
endsnippet

# conditional probability
context "math()"
snippet "(.)cnd" "Conditional probability" rA
`!p snip.rv = match.group(1)`P(${1:A} \mid ${2:B}) $0
endsnippet

# sim
context "math()"
snippet sim "Sim" A
\sim $0
endsnippet

# fancy E for expectation
context "math()"
snippet "(.*)EE" "Fancy expectation E" rA
`!p snip.rv = match.group(1)`\mathbb{E}$0
endsnippet

# blackboard bold R for real numbers
context "math()"
snippet "(.*)RR" "real number R" rA
`!p snip.rv = match.group(1)`\mathbb{R}$0
endsnippet

# fancy Z 
context "math()"
snippet "(^|[^a-zA-Z])ZZ" "Fancy Z" rA
`!p snip.rv = match.group(1)`\mathbb{Z}$0
endsnippet

# fancy P 
context "math()"
snippet "(^|[^a-zA-Z])PP" "Fancy P" rA
`!p snip.rv = match.group(1)`\mathbb{P}$0
endsnippet

# tripple dots with cdots
context "math()"
snippet ... "Cdot elipse" A
\cdots $0
endsnippet

# cases for piecewise functions
context "math()"
snippet cas "Case environment for piecewise functions" bA
\begin{cases}
    ${1:Case 1} & ${2:Function 1} \\\\
    ${3:Case 2} & ${4:Function 2}
\end{cases}
$0
endsnippet

# build an MxN matrix
context "math()"
pre_expand "mat(snip)"
snippet "ma(\d)(\d)" "Add an MxN matrix" rA
endsnippet

# new math block
snippet mm "New math block" bA
\[
${1:Body}
\]
$0
endsnippet

# "in" symbol for membership
context "math()"
snippet "(^|[^a-zA-Z])in" "'in' symbol for membership" rA
`!p snip.rv = match.group(1)`\in $0
endsnippet

# "not in" symbol for membership
context "math()"
snippet "(^|[^a-zA-Z])nin" "'not in' symbol for membership" rA
`!p snip.rv = match.group(1)`\notin $0
endsnippet

# generic phi symbol inside of an math environment
context "math()"
snippet "(^|[^a-zA-Z])phi" "phi" rA
`!p snip.rv = match.group(1)`\phi$0
endsnippet

# generic pi symbol inside of an math environment
context "math()"
snippet "(.*)pi" "pi" rA
`!p snip.rv = match.group(1)`\pi$0
endsnippet

# add text inside of math environment
context "math()"
snippet xt "text inside math" A
\text{${1:Text}}$0
endsnippet

# infinity
context "math()"
snippet "nf" "infinity" rA
\infty$0
endsnippet

# limit to infinity
context "math()"
snippet "lim" "limit to infinity" rA
\lim_{${1:n} \to \infty} $0
endsnippet

# limit to something
context "math()"
snippet "(.*)dlm" "limit to something" rA
`!p snip.rv = match.group(1)`\lim_{${1:n} \to ${2:\infty}} $0
endsnippet

# large line spacing
snippet "\\\\\\" "big line break" rA
\\\\[.1in]
$0
endsnippet

# align environment
snippet aal "align environment" bA
\begin{align*}
    $1
\end{align*}
$0
endsnippet

# add new figure from visual-selected name
snippet fig "new figure from visual" bA
\begin{figure}[ht]
    \centering
    \includegraphics[width=0.8\textwidth]{${1:name}}
    \caption{${2:caption}}
\end{figure}
$0
endsnippet

# list item
snippet itm "add a new item to a list" bA
\item $0
endsnippet

# subsection
snippet sub "add new subsection to document" bA
\subsection{${1:Name}}
$0
endsnippet

# page break
snippet pg "page break" bA
\pagebreak
$0
endsnippet

# unaligned box
context "math()"
snippet bx "unaligned box" bA
\boxed{$1} $0
endsnippet

# aligned box
context "math()"
snippet abx "aligned box" bA
\Aboxed{$1} $0
endsnippet

# section
snippet sec "add new section to document" bA
\section{${1:Name}}
$0
endsnippet

# natural log
context "math()"
snippet ln "natural log (ln)" A
\ln$0
endsnippet

# middle (conditional probability)
context "math()"
snippet mdl "generic \middle vertical line with spacing on both sides" A
\;\middle|\; $0
endsnippet

# left
context "math()"
snippet "(.*)lft" "generic \left" rA
`!p snip.rv = match.group(1)`\left$0
endsnippet

# right
context "math()"
snippet "(.*)rit" "generic \right" rA
`!p snip.rv = match.group(1)`\right$0
endsnippet

# conditional probability
context "math()"
snippet cond "conditional probability" A
\mathbb{P}\left(${1:A} \;\middle|\; ${2:B}\right) $0
endsnippet

# squart root
context "math()"
snippet "(.*)rt" "square root" rA
`!p snip.rv = match.group(1)`\sqrt{${1:n}}$0
endsnippet

# sigma
context "math()"
snippet "(.*)sig" "lowercase sigma" rA
`!p snip.rv = match.group(1)`\sigma$0
endsnippet

# Sigma
context "math()"
snippet "(.*)Sig" "uppercase sigma" rA
`!p snip.rv = match.group(1)`\Sigma$0
endsnippet

# beta
context "math()"
snippet "(.*)ba" "lowercase beta" rA
`!p snip.rv = match.group(1)`\beta$0
endsnippet

# epsilon
context "math()"
snippet "(.*)ep" "lowercase epsilon" rA
`!p snip.rv = match.group(1)`\epsilon$0
endsnippet

# code environment with verbatim
snippet vb "verbatim environment" bA
\begin{verbatim}
${1:code}
\end{verbatim}
$0
endsnippet

# big pi product
context "math()"
snippet pd "big Pi with sub and superscript" A
\prod_{${1:i=1}}^{${2:\infty}}$0
endsnippet

# plus minus
context "math()"
snippet pm "plus/minus" A
\pm$0
endsnippet

# table
snippet tb "table" A
\vspace{10px}
\begin{center}
\begin{tabular}{${1:c|c c c c}}
${2:cell1}
\end{tabular}
\end{center}
\vspace{10px}
$0
endsnippet

# cdot
context "math()"
snippet "(.*)dt" "cdot for multiplication" rA
`!p snip.rv = match.group(1)`\cdot$0
endsnippet

# iid tilde
context "math()"
snippet "(.*)iid" "iid tilde" rA
`!p snip.rv = match.group(1)`\overset{\mathrm{iid}}{\sim}
endsnippet

# squared
context "math()"
snippet "(.*)\^\^" "squared (raise to the power of two)" rA
`!p snip.rv = match.group(1)`^2$0
endsnippet

# enumerate : ordered lists
snippet enu "enumerated list" bA
\begin{enumerate}
    \item $1
\end{enumerate}$0
endsnippet

# vspace
snippet vs "vspace 10" bA
\vspace{10px}
$0
endsnippet

# indicator function
context "math()"
snippet ndd "indicator function" A
\mathbbm{1}_{${1:i}}$0
endsnippet

# bar
context "math()"
snippet "(.*)br" "bar" rA
`!p snip.rv = match.group(1)`\bar $0
endsnippet

# lambda
context "math()"
snippet "(.*)lda" "lambda" rA
`!p snip.rv = match.group(1)`\lambda$0
endsnippet

# mu
context "math()"
snippet "(.*)mu" "mu" rA
`!p snip.rv = match.group(1)`\mu$0
endsnippet

# delta
context "math()"
snippet "(.*)dla" "delta" rA
`!p snip.rv = match.group(1)`\delta$0
endsnippet

# Delta
context "math()"
snippet "(.*)Dla" "delta" rA
`!p snip.rv = match.group(1)`\Delta$0
endsnippet

# negation elbow
context "math()"
snippet "(.*)neg" "negation elbow" rA
`!p snip.rv = match.group(1)`\neg$0
endsnippet

# superscript
context "math()"
snippet "(.)\^" "exponent superscript" rA
`!p snip.rv = match.group(1)`^{${1:n}}$0
endsnippet

# derivative
context "math()"
snippet "(.*)dr" "derivative symbol" rA
`!p snip.rv = match.group(1)`\frac{d}{d${1:x}}$0
endsnippet

# succ/preference
context "math()"
snippet "(.*)pf" "succ" rA
`!p snip.rv = match.group(1)`\succ$0
endsnippet

# empty set
context "math()"
snippet "(.*)est" "empty set notation" rA
`!p snip.rv = match.group(1)`\emptyset$0
endsnippet

# mathcal F (calligraphy)
context "math()"
snippet "(.*)FF" "calligraphy F" rA
`!p snip.rv = match.group(1)`\mathcal{F}$0
endsnippet

# mathcal H (calligraphy)
context "math()"
snippet "(.*)HH" "calligraphy H" rA
`!p snip.rv = match.group(1)`\mathcal{H}$0
endsnippet

# general calligraphy
context "math()"
snippet "(.*)CC" "calligraphy H" rA
`!p snip.rv = match.group(1)`\mathcal{${1:H}}$0
endsnippet

# perp notation
context "math()"
snippet "(.*)prp" "perp (conditional independence)" rA
`!p snip.rv = match.group(1)`\perp $0
endsnippet

# proportionate to
context "math()"
snippet "(.*)pro" "proportionate to" rA	
`!p snip.rv = match.group(1)`\propto $0
endsnippet

# theta
context "math()"
snippet "(.*)tha" "theta" rA 
`!p snip.rv = match.group(1)`\theta$0
endsnippet

# underscore subscript
context "math()"
snippet "(.*)_" "underscore subscript" rA
`!p snip.rv = match.group(1)`_{${1:n}}$0
endsnippet

# tilde
context "math()"
snippet "(.*)tld" "tilde" rA
`!p snip.rv = match.group(1)`\tilde{${1:x}}$0
endsnippet

# approximate
context "math()"
snippet "(.*)app" "approximate" rA
`!p snip.rv = match.group(1)`\approx$0
endsnippet

# alpha
context "math()"
snippet "(.*)apa" "alpha" rA
`!p snip.rv = match.group(1)`\alpha$0
endsnippet

# nabla (gradient)
context "math()"
snippet "(.*)grd" "nabla (gradient)" rA
`!p snip.rv = match.group(1)`\nabla$0
endsnippet

# hat
context "math()"
snippet "(.*)ht" "hat" rA
`!p snip.rv = match.group(1)`\hat $0
endsnippet

# tau
context "math()"
snippet "(.*)tau" "tau" rA
`!p snip.rv = match.group(1)`\tau$0
endsnippet

# vector
context "math()"
snippet "(.*)vc" "vector arrow" rA
`!p snip.rv = match.group(1)`\vec $0
endsnippet

# right arrow
context "math()"
snippet "(.*)rra" "right arrow" rA
`!p snip.rv = match.group(1)`\rightarrow $0
endsnippet

# sub-subsection
snippet ssub "sub-subsectin" bA
\subsubsection{${1:Name}}
$0
endsnippet

# partial
context "math()"
snippet "(.*)pt" "partial symbol" rA
`!p snip.rv = match.group(1)`\partial $0
endsnippet

# kappa
context "math()"
snippet "(.*)kp" "kappa" rA
`!p snip.rv = match.group(1)`\kappa$0
endsnippet

# psi
context "math()"
snippet "(.*)psi" "lowercase psi" rA
`!p snip.rv = match.group(1)`\psi$0
endsnippet

#underset
context "math()"
snippet "(.*)uds" "underset" rA
`!p snip.rv = match.group(1)`\underset{${1:n}}{${2:x}}$0
endsnippet

# rho
context "math()"
snippet "(.*)rho" "rho" rA
`!p snip.rv = match.group(1)`\rho$0
endsnippet

# eta
context "math()"
snippet "(.*)tta" "eta" rA
`!p snip.rv = match.group(1)`\eta$0
endsnippet

# gamma
context "math()"
snippet "(.*)gmm" "lowercase gamma" rA
`!p snip.rv = match.group(1)`\gamma$0
endsnippet

# new algorithm block
snippet aag "new algorithm block" bA
\begin{algorithm}
\caption{${1:Caption}}
\begin{algorithmic}
${2:body}
\end{algorithmic}
\end{algorithm}
$0
endsnippet

# new state within an algorithm
context "algo()"
snippet st "new State" bA
\State $0
endsnippet

# new if statement within an algorithm
context "algo()"
snippet if "new IfElse" bA
\If{$1}
    ${2:body}
\EndIf$0
endsnippet

# new while loop in an algorithm
context "algo()"
snippet whi "new While loop" bA
\While{$1}
    ${2:body}
\EndWhile$0
endsnippet

# new else-if statement in an algorithm
context "algo()"
snippet elf "new Else-if" bA
\ElsIf{$1}
    ${2:body}
endsnippet

# add a comment into an algorithm
context "algo()"
snippet cm "add Comment" bA
\Comment{$1}
endsnippet

